#!/usr/bin/env coffee

require '../lib/prelude'

class Main
  constructor: ->
    [@src_file, @ccng_file, @api] = process.argv[2..]
    @src = load_yaml_file @src_file
    @ccng = load_yaml_file @ccng_file
    @openapi =
      swagger: '2.0'
      info:
        title: @src.name
        description: @src.desc
        version: @ccng.vers
        contact:
          name: 'Cloud Foundry Foundation'
        license:
          name: 'Apache 2.0'
          url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
      basePath: "/#{@api}"
      schemes: ['http']
      securityDefinitions:
        basicAuth:
          type: 'basic'
          description: 'HTTP Basic Authentication. Works over `HTTP` and `HTTPS`'
      paths: {}
      definitions: {}

  main: ->
    for k, v of @src
      if k.match /^\//
        @process_path k, v
      else if k.match /^\+/
        @process_definition k, v
    write_file '-', JSON.stringify @openapi, null, 2

  process_path: (path, data)->
    entry = @openapi.paths[path] = {}
    for verb, value of data
      if not value?
        value = desc: 'Undefined'
      else if typeof(value) == 'string'
        value = desc: value
      endpoint = entry[verb] = {}
      desc = value.desc || @ccng[path][verb].desc || 'Undefined'
      endpoint.description = desc
      a = _.filter desc.toLowerCase().split(' '), (s)->
        not s.match /^(a|an|the|particular)$/
      a = _.map a, (s)->
        _.upperFirst s
      endpoint.operationId = _.lowerFirst a.join ''

  process_definition: (id, data)->
#     id = id[1..]
#     @openapi.definitions[id] =
#       properties: {}
#     props = @openapi.definitions[id].properties
#     for k, v of data
#       if m = v.match /^\+str(?: --(.+))?$/
#         props[k] = type: 'string'
#       else if m = v.match /^\+int(?: --(.+))?$/
#         props[k] = type: 'integer'
#       else if m = v.match /^\+num(?: --(.+))?$/
#         props[k] = type: 'number'
#       else if m = v.match /^\+bool(?: --(.+))?$/
#         props[k] = type: 'boolean'
#       else if m = v.match /^\+(\w+)(?: --(.+))?$/
#         props[k] =
#           '$ref': "#/definitions/#{m[1]}"
#         m = [null, m[2]]
#       else if m = v.match /^\+(\w+)\[\](?: --(.+))?$/
#         props[k] =
#           type: 'array'
#           items:
#             '$ref': "#/definitions/#{m[1]}"
#         m = [null, m[2]]
#       else if k == '...'
#         @openapi.definitions[id] =
#           type: 'object'
#           additionalProperties:
#             type: 'string'
#         m = [null, null]
#       else
#         warn "??? '#{v}'"
#         continue
#       if m[1]?
#         props[k].description = m[1]

(new Main).main()
